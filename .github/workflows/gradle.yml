# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## 개선 사항 1: Gradle 캐싱 추가 (빌드 속도 향상)
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## application.yml 파일 생성 (Kakao API 설정 포함)
      - name: make application.yml
        run: |
          cd ./src/main/resources
          
          # application.yml 파일 생성
          touch ./application.yml
          
          # Spring 기본 설정 추가
          echo "spring:" >> ./application.yml
          echo "  application:" >> ./application.yml
          echo "    name: aliali" >> ./application.yml
          
          # 데이터베이스 설정 추가
          echo "  datasource:" >> ./application.yml
          echo "    url: jdbc:mysql://localhost:3306/aliali?serverTimezone=Asia/Seoul" >> ./application.yml
          echo "    username: '${{ secrets.DB_USERNAME }}'" >> ./application.yml  # GitHub Secrets 사용
          echo "    password: '${{ secrets.DB_PASSWORD }}'" >> ./application.yml  # GitHub Secrets 사용
          
          # JPA 설정 추가
          echo "  jpa:" >> ./application.yml
          echo "    hibernate:" >> ./application.yml
          echo "      ddl-auto: create" >> ./application.yml
          echo "    properties:" >> ./application.yml
          echo "      hibernate:" >> ./application.yml
          echo "        # format_sql: true" >> ./application.yml
          
          # Devtools 설정 추가
          echo "  devtools:" >> ./application.yml
          echo "    livereload:" >> ./application.yml
          echo "      enabled: true" >> ./application.yml
          echo "    restart:" >> ./application.yml
          echo "      enabled: true" >> ./application.yml
          
          # Mail 설정 추가
          echo "  mail:" >> ./application.yml
          echo "    host: smtp.gmail.com" >> ./application.yml
          echo "    port: 587" >> ./application.yml
          echo "    username: '${{ secrets.MAIL_USERNAME }}'" >> ./application.yml  # GitHub Secrets 사용
          echo "    password: '${{ secrets.MAIL_PASSWORD }}'" >> ./application.yml  # GitHub Secrets 사용
          echo "    properties:" >> ./application.yml
          echo "      mail:" >> ./application.yml
          echo "        smtp:" >> ./application.yml
          echo "          auth: true" >> ./application.yml
          echo "          starttls:" >> ./application.yml
          echo "            enable: true" >> ./application.yml
          echo "            required: true" >> ./application.yml
          echo "          connectiontimeout: 5000" >> ./application.yml
          echo "          timeout: 5000" >> ./application.yml
          echo "          writetimeout: 5000" >> ./application.yml
          echo "    auth-code-expiration-millis: 1800000" >> ./application.yml  # 30 minutes 설정

          # Security 설정 추가
          echo "security:" >> ./application.yml
          echo "  jwt:" >> ./application.yml
          echo "    accees-expiration:  '${{ secrets.SECURITY_JWT_ACCEES_EXPIRATION }}'" >> ./application.yml
          echo "  secret-key:  '${{ secrets.SECURITY_SECRET_KEY }}'" >> ./application.yml
          
          # Kakao 설정 추가
          echo "kakao:" >> ./application.yml
          echo "  client:" >> ./application.yml
          echo "    id: '${{ secrets.KAKAO_CLIENT_ID }}'" >> ./application.yml
          echo "    secret: '${{ secrets.KAKAO_CLIENT_SECRET }}'" >> ./application.yml
          echo "  redirect:" >> ./application.yml
          echo "    url: '${{ secrets.KAKAO_REDIRECT_URL }}'" >> ./application.yml

          # Spring 설정 추가 (8080번 포트로 설정)
          echo "server:" >> ./application.yml
          echo "  port: 8080" >> ./application.yml
          echo "  servlet:" >> ./application.yml
          echo "    encoding:" >> ./application.yml
          echo "      charset: UTF-8" >> ./application.yml
          echo "      force: true" >> ./application.yml

          # imageFile 설정 추가
          echo "imageFile:" >> ./application.yml
          echo "  resourcePath: '${{ secrets.IMAGE_RESOURCE_PATH }}'" >> ./application.yml
          echo "  uploadDir: '${{ secrets.IMAGE_UPLOAD_DIR }}'" >> ./application.yml
          echo "  connectPath: '${{ secrets.IMAGE_CONNECT_PATH }}'" >> ./application.yml
          echo "  savePath: '${{ secrets.IMAGE_SAVE_PATH }}'" >> ./application.yml

      ## Gradle 빌드 실행
      - name: Build with Gradle
        run: |
          chmod +x gradlew 
          ./gradlew bootJar -x test  # 테스트를 건너뛰고 bootJar 실행
          
      ## 개선 사항 2: bootJar 명령어 추가 (Spring Boot 실행 파일 생성)
      - name: Create bootJar
        run: ./gradlew bootJar
          
      ## 개선 사항 3: Docker 이미지 빌드 및 태그 추가
      - name: web docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest .  # latest 태그 추가
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest  # latest 태그 푸시
          
      ## 개선 사항 4: docker-compose.yml 경로 설정 및 Docker Compose 실행
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo docker rm $(sudo docker ps -a)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest  # latest 태그 이미지 가져오기
            cd /path/to/docker-compose  # docker-compose.yml 파일이 위치한 경로로 이동 (경로 수정 필요)
            docker-compose up -d  # docker-compose 실행
            sudo docker image prune -f  # 불필요한 이미지 정리
